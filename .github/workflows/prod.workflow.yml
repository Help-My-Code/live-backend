name: CI/CD


on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      - run: npm ci
      - run: npm run build --if-present
      - run: npm test

  push_to_registry:
    name: push_to_registry
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v1

      - name: Login to Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.PROD_DOCKER_HOST }}/${{ secrets.PROD_DOCKER_REGISTRY }}
          username: ${{ secrets.PROD_DOCKER_USERNAME }}
          password: ${{ secrets.PROD_DOCKER_REGISTRY_PASSWORD }}
      - name: Build the tagged Docker image
        run: "docker build \
        -f Dockerfile . \
        --build-arg COMPILER_URL=${{ secrets.PROD_COMPILER_URL }} \
        --tag ${{ secrets.PROD_DOCKER_HOST }}/${{ secrets.PROD_DOCKER_REGISTRY }}/${{ secrets.PROJECT_NAME }}-snapshot-${{ secrets.PROD_VERSION }}:latest"
      - name: Push the tagged Docker image
        run: docker push ${{ secrets.PROD_DOCKER_HOST }}/${{ secrets.PROD_DOCKER_REGISTRY }}/${{ secrets.PROJECT_NAME }}-${{ secrets.PROD_VERSION }}:latest
  deploy:
    name: deploy
    needs: push_to_registry
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: appleboy/ssh-action@master
        with:
          host: '${{ secrets.K8S_MASTER_HOST_IP }}'
          username: '${{ secrets.K8S_MASTER_USERNAME }}'
          password: '${{ secrets.K8S_MASTER_PASSWORD }}'
          script: cd k8s-pmc/ && git pull && helm upgrade --recreate-pods ${{ secrets.PROJECT_NAME }} ${{ secrets.PROJECT_NAME }}/ -f ${{ secrets.PROJECT_NAME }}/values-prod.yaml
